@page "/"
@using System.Globalization;
@using SearchApp.Models
@rendermode InteractiveServer

<div class="position-relative min-vh-80" @onclick="OnClickDocument">
    <h1>Current Language: @Lang</h1>
    <div class="position-absolute search-container">
        <div class="d-flex justify-content-center mb-3">
            <img src="/logo.png" style="width: 150px; height: 150px;" />
        </div>
        <div class="autocomplete" style="width:400px;">
            <i class="fas fa-search autocomplete-input-icon"></i>
            <input autocomplete="off" id="myCustomInput" class="form-control" type="text" name="myCountry" placeholder="Type food name..." @oninput="DebouncedGetFoodData" @onkeydown="OnAutoCompleteKeyDown">
            <div id="autocomplete-list" class="autocomplete-items">
                @if (FoodList?.Options?.Count > 0)
                {
                    @foreach (var Food in FoodList.Options)
                    {
                        @if (userQuery.Length <= (Food.prefix+Food.suffix).Length)
                        {
                            <div @onclick="() => OnAutoCompleteChanged(Food)">
                                <i class="fas fa-search mr-1 text-gray"></i>
                                <strong>@((Food.prefix+Food.suffix).Substring(0, userQuery.Length))</strong>@((Food.prefix + Food.suffix).Substring(userQuery.Length))
                                <input type="hidden" value="@(Food.prefix+Food.suffix)" />
                            </div>
                        }
                    }
                }
            </div>  
        </div>
    </div>
</div>

<script>
    var currentFocus = -1;
    var inp = document.getElementById("myCustomInput")
    inp.addEventListener("keydown", function (e) {
        var x = document.getElementById("autocomplete-list");
        if (x) x = x.getElementsByTagName("div");
        if (e.keyCode == 40) {
            currentFocus++;
            addActive(x);
        } else if (e.keyCode == 38) {
            currentFocus--;
            addActive(x);
        } else if (e.keyCode == 13 && currentFocus > -1) {
            e.preventDefault();
            if (x) x[currentFocus].click();
        }
    });
    function addActive(x) {
        if (!x || x.length==0) return false;
        removeActive(x);
        if (currentFocus >= x.length) currentFocus = 0;
        if (currentFocus < 0) currentFocus = (x.length - 1);
        x[currentFocus].classList.add("autocomplete-active");
    }
    function removeActive(x) {
        for (var i = 0; i < x.length; i++) {
            x[i].classList.remove("autocomplete-active");
        }
    }
    window.getNavigatorLanguage = function () {
        return navigator.language || navigator.userLanguage;
    };
</script>



@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@code {
    private AutoResponse FoodList;
    private string userQuery = "";
    private Timer debounceTimer;
    private string Lang = "";
    private int FocusNo = -1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Lang = await JSRuntime.InvokeAsync<string>("getNavigatorLanguage");
            Lang = Lang.Substring(0, 2);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Lang = await JSRuntime.InvokeAsync<string>("getNavigatorLanguage"); 
        debounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await GetFoodData();
                StateHasChanged();
            });
        }, null, Timeout.Infinite, Timeout.Infinite);
    }

    private async Task HandleSubmit()
    {
        Navigation.NavigateTo($"/search?q={userQuery}");
    }

    private async Task DebouncedGetFoodData(ChangeEventArgs e)
    {
        userQuery = e.Value.ToString();
        RestartDebounceTimer();
    }

    private void RestartDebounceTimer()
    {
        debounceTimer.Change(500, Timeout.Infinite);
    }

    private async Task GetFoodData()
    {
        Console.WriteLine("GetFoodData", userQuery);
        if (userQuery != "")
        {
            try
            {
                FoodList = await Http.GetFromJsonAsync<AutoResponse>($"https://api.mydailybits.com/fooddb/Search/AutoComplete?query={userQuery}&locale={Lang}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
        else
        {
            FoodList = new AutoResponse();
        }
    }

    private void OnClickDocument()
    {
        FoodList = new AutoResponse();
    }

    private async Task OnAutoCompleteKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter")
        {
            await HandleSubmit();
        }
    }

    private void OnAutoCompleteChanged(AutoOption food)
    {
        if(food?.prefix != "")
        {
            userQuery = food.prefix + food.suffix;
            HandleSubmit();
        }
    }
}