@page "/food/{Language}/{UserQuery}"
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (!(FoodInfo?.NutritionPer100g?.Count > 0))
{
    <div class="d-flex justify-content-center">
        <p><em>Loading...</em></p>
    </div>
}
else
{
    <div class="d-flex justify-content-center min-vh-80 mb-5">
        <div class="overflow-auto nutrition-container mt-3 p-2">
            <a class="cursor-point text-decoration-none text-black" @onclick="GoBack"><i class="fa fa-angle-left m-2" aria-hidden="true" style="font-size: 14px;"></i>Back to results</a>
            <h1>Nutrition Facts</h1>
            <p class="m-0">Serving Size @FoodInfo.ServingOptions!.Count</p>

            <div class="top-border">
                <div class="d-flex justify-content-between align-items-center border-bottom pt-2 pb-2">
                    <p class="fw-bold">Amount Per Serving</p>
                    <Dropdown>
                        <DropdownToggleButton Color="ButtonColor.Secondary">@ServingAmount g</DropdownToggleButton>
                        <DropdownMenu>
                            @foreach(var Option in FoodInfo.ServingOptions)
                            {
                                <DropdownItem @onclick="() => UpdateServingAmount(Option.Gram)" Type="ButtonType.Link">@Option.Gram g</DropdownItem>
                            }
                        </DropdownMenu>
                    </Dropdown>
                </div>
                <div class="d-flex justify-content-between border-bottom-2 mb-2">
                    <h2 class="m-0">Calories 230</h2>
                    <p class="m-0">Calories from Fat 40</p>
                </div>

                <div class="d-flex justify-content-end border-bottom mb-2">
                    <p class="fw-bold m-0">Value per 100g *</p>
                </div>
                @if (IsCollapse && FoodInfo.NutritionPer100g.Count > 10)
                {
                    @foreach (var Nutrition in FoodInfo.NutritionPer100g.Slice(0, 10))
                    {
                        <div class="d-flex justify-content-between border-bottom mb-2">
                            <h2 class="m-0">@Nutrition.NutritionPoint</h2>
                            <p class="m-0"><span class="fw-bold">@(Double.Round((Nutrition.Value * ServingAmount / 100), 3))</span> @ConvertUnit(Nutrition.Unit)</p>
                        </div>
                    }
                    <Button Color="ButtonColor.Link" @onclick="OnClickCollapse"> Read More </Button>
                }
                else
                {
                    @foreach (var Nutrition in FoodInfo.NutritionPer100g)
                    {
                        <div class="d-flex justify-content-between mb-2">
                            <h2 class="m-0">@Nutrition.NutritionPoint</h2>
                            <p class="m-0"><span class="fw-bold">@(Double.Round((Nutrition.Value * ServingAmount/100), 3))</span> @ConvertUnit(Nutrition.Unit)</p>
                        </div>
                    }
                    @if (FoodInfo.NutritionPer100g.Count > 10)
                    {
                        <Button Color="ButtonColor.Link" @onclick="OnClickCollapse"> Read Less </Button>
                    }
                }
            </div>
        </div>
    </div>
}

@inject HttpClient Http
@inject IJSRuntime JSRuntime

@code {
    private FoodNutrition FoodInfo;
    private double ServingAmount;
    private bool IsCollapse = true;

    [Parameter]
    public string Language { get; set; }

    [Parameter]
    public string UserQuery { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", "window.blazorNavigateBack = function() { history.back(); }");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        var segments = uri.Segments;

        Language = segments[2].Trim('/');
        UserQuery = segments[3].Trim('/');

        await HandleSubmit();
    }

    void UpdateServingAmount(double grams)
    {
        ServingAmount = grams;
    }

    void OnClickCollapse()
    {
        IsCollapse = !IsCollapse;
    }

    private async Task GoBack()
    {
        await JSRuntime.InvokeVoidAsync("blazorNavigateBack");
    }

    private string ConvertUnit(string unit)
    {
        if (unit == "milligram") return "mg";
        else if (unit == "gram") return "g";
        else if (unit == "microgram") return "mcg";
        else return unit;
    }

    private async Task HandleSubmit()
    {

        try
        {
            FoodInfo = await Http.GetFromJsonAsync<FoodNutrition>($"https://api.mydailybits.com/fooddb/Nutrition/GetNutrition?itemId={UserQuery}&locale=en");
            UpdateServingAmount(FoodInfo.ServingOptions[0].Gram);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Something went wrong!");
        }
    }

    private class ServingOption
    {
        public string? Text { get; set; }
        public double Gram { get; set; }
    }

    private class NutritionPerUnit
    {
        public string? NutritionPoint { get; set; }
        public double Value { get; set; }
        public string? Unit { get; set; }
        public double? PctDailyValue { get; set; }
    }

    private class FoodNutrition
    {
        public List<ServingOption>? ServingOptions { get; set; }
        public List<NutritionPerUnit>? NutritionPer100g { get; set; }
    }
}
