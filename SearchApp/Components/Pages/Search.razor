@page "/search"
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="min-vh-80">
    <div class="d-flex justify-content-center mt-5">
        <div>
            <AutoComplete class="search-input" @bind-Value="userQuery"
                id="autoComplete"
                TItem="Food"
                DataProvider="FoodsDataProvider"
                PropertyName="FoodName"
                @onkeypress="OnAutoCompleteKeyDown"
                OnChanged="(Food food) => OnAutoCompleteChanged(food)" />
        </div>
    </div>
    <div class="d-flex justify-content-center mt-4">
        @if (Items?.Count > 0)
        {
            <ul>
                @foreach(var FoodItem in Items)
                {
                    <li><a href="/food/en/@FoodItem.ItemId">@FoodItem.Text - @FoodItem.ItemId</a></li>
                }
            </ul>
        }
    </div>
</div>

@inject HttpClient Http
@code {
    private string userQuery = "";
    private List<FindItem> Items = new List<FindItem>();

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);

        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (userQuery == "")
        {
            userQuery = queryParams["q"];
        }
        Console.WriteLine(userQuery);
        await getFoodList();
    }

    private async Task HandleSubmit()
    {
        Navigation.NavigateTo($"/search?q={userQuery}");
        await OnInitializedAsync();
    }

    private async Task<AutoCompleteDataProviderResult<Food>> FoodsDataProvider(AutoCompleteDataProviderRequest<Food> request)
    {
        try
        {
            AutoResponse searchResult;
            var query = request.Filter.Value;
            userQuery = query;
            using (var cts = CancellationTokenSource.CreateLinkedTokenSource(request.CancellationToken))
            {
                // Add cancellation token to the HTTP request
                cts.CancelAfter(TimeSpan.FromSeconds(10)); // Set a reasonable timeout
                searchResult = await Http.GetFromJsonAsync<AutoResponse>($"https://api.mydailybits.com/fooddb/Search/AutoComplete?query={query}&locale=en", cts.Token);
            }

            var foods = searchResult.Options.Select((f, idx) => new Food(idx, f.prefix + f.suffix));

            return await Task.FromResult(request.ApplyTo(foods));
        }
        catch (TaskCanceledException)
        {
            return null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            return null;
        }
    }

    private async Task<List<FindItem>> getFoodList()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<FindItemResponse>($"https://api.mydailybits.com/fooddb/Search/Find?query={userQuery}&start=1&count=10&locale=en");
            Items = response.Results;
            return Items;
        } 
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            return null;
        }
    }

    private async Task OnAutoCompleteInput(ChangeEventArgs e)
    {
        userQuery = e.Value.ToString();
        Console.WriteLine("input " + userQuery);
    }

    private async Task OnAutoCompleteKeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine("press " + e.Code + " " + userQuery);
        if (e.Code == "Enter")
        {
            await HandleSubmit();
        }
    }

    private void OnAutoCompleteChanged(Food food)
    {
        Console.WriteLine($"'{food?.FoodName}' selected.");
        if (food?.FoodName != "")
        {
            userQuery = food.FoodName;
            HandleSubmit();
        }
    }

    private class AutoResponse
    {
        public string? Query { get; set; }
        public List<AutoOption>? Options { get; set; }
        public string? Locale { get; set; }
    }

    private class AutoOption
    {
        public string? prefix { get; set; }
        public string? suffix { get; set; }
    }

    public record Food(int FoodId, string FoodName);

    private class FindItemResponse
    {
        public string? Query { get; set; }
        public List<FindItem>? Results { get; set; }
        public string? Locale { get; set; }
    }

    private class FindItem
    {
        public string? Text { get; set; }
        public string? ItemId { get; set; }
    }

}