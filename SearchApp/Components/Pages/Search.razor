@page "/search"
@using System.Globalization;
@using SearchApp.Models
@using SearchApp.Store
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="min-vh-80" @onclick="OnClickDocument">
    <div class="d-flex justify-content-center mt-5">
        <div>
            <div class="autocomplete" style="width:400px;">
                <i class="fas fa-search autocomplete-input-icon"></i>
                <InputText autocomplete="off" id="myCustomInput" @bind-Value="userQuery" class="form-control" type="text" name="myCountry" placeholder="Type food name..." @oninput="DebouncedGetFoodData" @onkeydown="OnAutoCompleteKeyDown" />
                <div id="autocomplete-list" class="autocomplete-items">
                    @if (FoodList?.Options?.Count > 0)
                    {
                        @foreach (var Food in FoodList.Options)
                        {
                            @if (userQuery.Length <= (Food.prefix + Food.suffix).Length)
                            {
                                <div @onclick="() => OnAutoCompleteChanged(Food)">
                                    <i class="fas fa-search mr-1 text-gray"></i>
                                    <strong>@((Food.prefix + Food.suffix).Substring(0, userQuery.Length))</strong>@((Food.prefix + Food.suffix).Substring(userQuery.Length))
                                    <input type="hidden" value="@(Food.prefix+Food.suffix)" />
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="d-flex justify-content-center mt-4">
        @if (Items?.Count > 0)
        {
            <ul>
                @foreach(var FoodItem in Items)
                {
                    <li><a href="/food/@Lang/@FoodItem.ItemId">@FoodItem.Text - @FoodItem.ItemId</a></li>
                }
            </ul>
        }
    </div>
</div>

<script>
    setTimeout(() => {
        var currentFocus = -1;
        var inp = document.getElementById("myCustomInput")
        console.log('inp', inp)
        inp.addEventListener("keydown", function (e) {
            console.log('keydown')
            var x = document.getElementById("autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                currentFocus++;
                addActive(x);
            } else if (e.keyCode == 38) {
                currentFocus--;
                addActive(x);
            } else if (e.keyCode == 13 && currentFocus > -1) {
                e.preventDefault();
                if (x) x[currentFocus].click();
            }
        });
        function addActive(x) {
            if (!x || x.length == 0) return false;
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
    }, 500)
    window.getNavigatorLanguage = function () {
        return navigator.language || navigator.userLanguage;
    };
</script>

@inject HttpClient Http
@inject IJSRuntime JSRuntime

@code {
    private string userQuery = "";
    private string Lang = "";
    private List<FindItem> Items = new List<FindItem>();
    private AutoResponse FoodList;
    private Timer debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        UrlStore.prevUrl = Navigation.Uri;

        debounceTimer = new Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await GetFoodData();
                StateHasChanged();
            });
        }, null, Timeout.Infinite, Timeout.Infinite);

        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (userQuery == "")
        {
            userQuery = queryParams["q"];
        }
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Lang = await JSRuntime.InvokeAsync<string>("getNavigatorLanguage");
            Lang = Lang.Substring(0, 2);
            StateHasChanged();
            await getFoodList();
            StateHasChanged();
        }
    }

    private async Task HandleSubmit()
    {
        Navigation.NavigateTo($"/search?q={userQuery}");
        await OnInitializedAsync();
    }

    private void OnClickDocument()
    {
        FoodList = new AutoResponse();
    }

    private async Task GetFoodData()
    {
        Console.WriteLine("GetFoodData", userQuery);
        if (userQuery != "")
        {
            try
            {
                FoodList = await Http.GetFromJsonAsync<AutoResponse>($"https://api.mydailybits.com/fooddb/Search/AutoComplete?query={userQuery}&locale={Lang}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
        else
        {
            FoodList = new AutoResponse();
        }
    }

    private async Task<List<FindItem>> getFoodList()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<FindItemResponse>($"https://api.mydailybits.com/fooddb/Search/Find?query={userQuery}&start=1&count=10&locale={Lang}");
            Items = response.Results;
            return Items;
        } 
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            return null;
        }
    }

    private async Task OnAutoCompleteInput(ChangeEventArgs e)
    {
        userQuery = e.Value.ToString();
        Console.WriteLine("input " + userQuery);
    }

    private async Task OnAutoCompleteKeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine("press " + e.Code + " " + userQuery);
        if (e.Code == "Enter")
        {
            await HandleSubmit();
        }
    }

    private void OnAutoCompleteChanged(AutoOption food)
    {
        if (food?.prefix != "")
        {
            userQuery = food.prefix + food.suffix;
            HandleSubmit();
        }
    }

    private void RestartDebounceTimer()
    {
        debounceTimer.Change(500, Timeout.Infinite);
    }

    private async Task DebouncedGetFoodData(ChangeEventArgs e)
    {
        userQuery = e.Value.ToString();
        RestartDebounceTimer();
    }
}